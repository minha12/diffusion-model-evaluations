models:
  sd35_controlnet:
    base_path: "/home/ubuntu/models/stabilityai/stable-diffusion-3-medium-diffusers"
    controlnet_path: "/home/ubuntu/models/trained-diffusion/controlnet-sd3.5"
    model_type: "sd3"  # Specific model architecture
    model_class: "sd"  # Indicates which inference pipeline to use
    num_inference_steps: 28  # SD3-specific inference steps
  sd21_controlnet:
    base_path: "stabilityai/stable-diffusion-2-1-base"  # Can be HF ID or local path
    controlnet_path: "/home/ubuntu/models/trained-diffusion/sd21_controlnet/controlnet"
    model_type: "sd2"  # Specific model architecture
    model_class: "sd"  # Indicates which inference pipeline to use
    num_inference_steps: 50  # SD2-specific inference steps
  ldm_model_512:
    model_type: "ldm"  # Specific model architecture
    model_class: "ldm"  # Indicates which inference pipeline to use
    config_path: "/home/ubuntu/models/trained-diffusion/ldm/config-512-with-vq-f4.yaml"
    ckpt_path: "/home/ubuntu/models/trained-diffusion/ldm/epoch=000099.ckpt"
    num_inference_steps: 200  # LDM-specific inference steps

inference:
  batch_size: 4
  num_inference_steps: 28 # Global default (fallback if not specified in model)
  resolution: 512
  seed: 42

# Dataset information
dataset_name: &dataset_name "drsk_1k_seed_42"
dataset: *dataset_name  # Using the alias to reference the anchor

# Data source information
data_sources:
  *dataset_name:
    path: "~/datasets/drsk"

# Dataset preparation parameters
dataset_preparation:
  num_samples: 1000
  seed: 42

# Accelerate config
accelerate_config: "config/accelerate_config.yaml"

# --- Downstream Task Evaluation Settings ---
downstream_tasks:
  enabled: true # Set to false to skip downstream tasks
  classification:
    enabled: true
    model: "resnet18" # Model architecture from torchvision.models
    num_epochs: 10
    batch_size: 16
    learning_rate: 0.001
    # How to derive labels from masks:
    # 'binary_carcinoma': Label 1 if carcinoma > threshold, else 0
    # 'multiclass_dominant': Label is the most frequent class (excluding Unknown/Background)
    labeling_strategy: "binary_carcinoma"
    carcinoma_threshold: 0.1 # Minimum fraction of carcinoma pixels for binary label 1
    num_classes: 2 # Adjust based on labeling_strategy (2 for binary, 3+ for multiclass)
    class_names: ["Other", "Carcinoma"] # Corresponds to binary_carcinoma strategy
    # You might need to adjust num_classes and class_names if using multiclass
    # class_names_multiclass: ["Inflammatory/Reactive", "Carcinoma", "Normal"] # Example for multiclass
  segmentation:
    enabled: true
    model: "unet" # Can be 'unet' (basic implementation) or specific from segmentation-models-pytorch
    encoder: "resnet34" # Encoder for U-Net (if using segmentation-models-pytorch)
    num_epochs: 20
    batch_size: 8
    learning_rate: 0.001
    num_classes: 5 # Corresponds to your mask labels 0-4
    class_names: ["Unknown", "Background/Artifact", "Inflammatory/Reactive", "Carcinoma", "Normal"]

# --- Conda Environments ---
conda_envs:
  default: "envs/default.yaml" # Assumes env with torch, torchvision, torchmetrics, pyyaml, etc.
  ldm: "envs/ldm.yaml"
  downstream: "envs/downstream.yaml" # New environment for downstream tasks